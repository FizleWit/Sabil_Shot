1,860
108
456
261
25
46
110
198



3064

28,000

use serde_derive::{Deserialize, Serialize};
use std::fs;
use std::env;
use std::path::PathBuf;
extern crate serde_json;
#[macro_use] extern crate serde_derive;
use std::io::Error;
use std::fs::File;



276


Asus Pro Art x670E creator wifi 500

fn main()
{
//read file
let mut variable_list = {
  let variable_list = std::fs::read_to_string("./Variables2.json").unwrap();

  // Load the MissyFoodSchedule structure from the string.
  serde_json::from_str::<VariableSturct>(&variable_list).unwrap()

};

variable_list.hello= "DEEON".to_string();
  //  dbg!(variable_list);
std::fs::write(
  
  std::fs::read_to_string("./Variables2.json"),
  serde_json::to_string_pretty(&variable_list).unwrap(),
  
)?;




std::fs::write(
  file,
  serde_json::to_string_pretty(&json).unwrap(),
)
.unwrap();


///////

  let file = fs::File::open("./Data/Variables2.json")
  .expect("file should open read only");
let json: serde_json::Value = serde_json::from_reader(file)
  .expect("file should be proper JSON");
dbg!(json);}



  let file = fs::File::open("./Data/Variables2.json")
  .expect("file should open read only");
let json: serde_json::Value = serde_json::from_reader(file)
  .expect("file should be proper JSON");
dbg!(json);
json.hello = "gutentag";
//let mut text = serde_json::to_string(&json);
//fs::write("./Data/Variables2.json",text);